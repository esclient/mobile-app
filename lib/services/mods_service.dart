import 'package:graphql_flutter/graphql_flutter.dart';\nimport '../model/mod_item.dart';\n\nclass ModsService {\n  final GraphQLClient client;\n\n  ModsService(this.client);\n\n  // Запрос для получения списка модов\n  static const String getModsQuery = r'''\n    query GetMods($period: String, $limit: Int, $offset: Int) {\n      mods(period: $period, limit: $limit, offset: $offset) {\n        id\n        title\n        description\n        rating\n        ratingsCount\n        imageUrl\n        tags\n        createdAt\n        authorId\n        downloadsCount\n      }\n    }\n  ''';\n\n  Future<List<ModItem>> fetchMods({\n    String period = 'all_time',\n    int limit = 20,\n    int offset = 0,\n  }) async {\n    try {\n      final QueryOptions options = QueryOptions(\n        document: gql(getModsQuery),\n        variables: {\n          'period': period,\n          'limit': limit,\n          'offset': offset,\n        },\n      );\n\n      final QueryResult result = await client.query(options);\n\n      if (result.hasException) {\n        print('GraphQL Exception: ${result.exception}');\n        // Возвращаем моковые данные в случае ошибки\n        return _getMockMods();\n      }\n\n      final List<dynamic> modsData = result.data?['mods'] ?? [];\n      return modsData.map((json) => ModItem.fromJson(json)).toList();\n    } catch (e) {\n      print('Error fetching mods: $e');\n      // Возвращаем моковые данные в случае ошибки\n      return _getMockMods();\n    }\n  }\n\n  // Моковые данные для демонстрации\n  List<ModItem> _getMockMods() {\n    return [\n      ModItem(\n        id: '1',\n        title: 'Better Graphics Mod',\n        description: 'This mod enhances the visual experience with improved graphics, better lighting, and enhanced textures. Perfect for players who want a more immersive gaming experience.',\n        rating: 4.8,\n        ratingsCount: 5432,\n        imageUrl: 'https://picsum.photos/48/48?random=1',\n        tags: ['Graphics', 'Visual', 'Enhancement', 'Quality', 'Immersion'],\n        createdAt: DateTime.now().subtract(const Duration(days: 30)),\n        authorId: 'author_1',\n        downloadsCount: 15420,\n      ),\n      ModItem(\n        id: '2',\n        title: 'Ultimate Gameplay Overhaul',\n        description: 'Complete gameplay transformation with new mechanics, improved AI, and balanced difficulty settings. A must-have for experienced players.',\n        rating: 4.6,\n        ratingsCount: 3210,\n        imageUrl: 'https://picsum.photos/48/48?random=2',\n        tags: ['Gameplay', 'Overhaul', 'Mechanics', 'AI'],\n        createdAt: DateTime.now().subtract(const Duration(days: 15)),\n        authorId: 'author_2',\n        downloadsCount: 8765,\n      ),\n      ModItem(\n        id: '3',\n        title: 'Audio Enhancement Pack',\n        description: 'High-quality audio improvements including better sound effects, ambient sounds, and music tracks.',\n        rating: 4.3,\n        ratingsCount: 1876,\n        imageUrl: 'https://picsum.photos/48/48?random=3',\n        tags: ['Audio', 'Sound', 'Music'],\n        createdAt: DateTime.now().subtract(const Duration(days: 7)),\n        authorId: 'author_3',\n        downloadsCount: 4321,\n      ),\n      ModItem(\n        id: '4',\n        title: 'Performance Optimizer',\n        description: 'Optimizes game performance for better FPS and reduced loading times on lower-end systems.',\n        rating: 4.1,\n        ratingsCount: 987,\n        imageUrl: 'https://picsum.photos/48/48?random=4',\n        tags: ['Performance', 'Optimization'],\n        createdAt: DateTime.now().subtract(const Duration(days: 3)),\n        authorId: 'author_4',\n        downloadsCount: 2109,\n      ),\n      ModItem(\n        id: '5',\n        title: 'Content Expansion',\n        description: 'Adds new content including quests, items, and characters to extend your gaming experience.',\n        rating: 4.9,\n        ratingsCount: 7654,\n        imageUrl: 'https://picsum.photos/48/48?random=5',\n        tags: ['Content', 'Expansion', 'Quests', 'Items', 'Characters'],\n        createdAt: DateTime.now().subtract(const Duration(days: 1)),\n        authorId: 'author_5',\n        downloadsCount: 23456,\n      ),\n    ];\n  }\n\n  // Поиск модов\n  Future<List<ModItem>> searchMods(String query) async {\n    // Здесь должен быть реальный поиск через GraphQL\n    // Пока возвращаем фильтрованные моковые данные\n    final allMods = await fetchMods();\n    return allMods\n        .where((mod) =>\n            mod.title.toLowerCase().contains(query.toLowerCase()) ||\n            mod.description.toLowerCase().contains(query.toLowerCase()) ||\n            mod.tags.any((tag) => tag.toLowerCase().contains(query.toLowerCase())))\n        .toList();\n  }\n}\n"